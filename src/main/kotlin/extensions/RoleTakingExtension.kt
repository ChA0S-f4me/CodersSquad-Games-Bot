package extensions

import Config
import com.kotlindiscord.kord.extensions.commands.Arguments
import com.kotlindiscord.kord.extensions.commands.application.slash.ephemeralSubCommand
import com.kotlindiscord.kord.extensions.commands.converters.impl.channel
import com.kotlindiscord.kord.extensions.components.components
import com.kotlindiscord.kord.extensions.components.ephemeralButton
import com.kotlindiscord.kord.extensions.components.types.emoji
import com.kotlindiscord.kord.extensions.extensions.Extension
import com.kotlindiscord.kord.extensions.extensions.ephemeralSlashCommand
import com.kotlindiscord.kord.extensions.types.respond
import com.kotlindiscord.kord.extensions.utils.hasRole
import dev.kord.common.entity.ButtonStyle
import dev.kord.common.entity.ChannelType
import dev.kord.common.entity.Snowflake
import dev.kord.core.behavior.channel.asChannelOf
import dev.kord.core.behavior.edit
import dev.kord.core.entity.Message
import dev.kord.core.entity.channel.TextChannel
import dev.kord.rest.builder.message.modify.embed

class RoleTakingExtension : Extension() {
	override val name = "role-taking"

	override suspend fun setup() {
		var currentMessage: Message? = null

		ephemeralSlashCommand {
			name = "roles"
			description = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏"
			allowByDefault = false

			ephemeralSubCommand(::RolesPostArguments) {
				name = "post"
				description = "–ü–æ—Å—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ –≤–∑—è—Ç–∏–µ–º —Ä–æ–ª–µ–π"

				action {
					val channel = arguments.channel.asChannelOf<TextChannel>()

					currentMessage = channel.createMessage("Wait...")
					editLikePostMessage(currentMessage!!)

					respond { content = "‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" }
				}
			}

			ephemeralSubCommand {
				name = "update"
				description = "–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–æ–ª—è–º–∏"

				action {
					if (currentMessage != null) {
						Config.update()
						editLikePostMessage(currentMessage!!)

						respond { content = "‚úÖ –ö–æ–Ω—Ñ–∏–≥ –∏ –∫–∞—Ä—Ç–æ—á–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã" }
					}
					else {
						respond { content = "–ê —Å–º—ã—Å–ª? –∫–∞—Ä—Ç–æ—á–∫–∞ –µ—â—ë –Ω–µ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–∞—Å—å –∂–µ" }
					}
				}
			}
		}
	}

	private suspend fun editLikePostMessage(message: Message) = message.edit {
		content = "–í—ã–¥–∞—á–∞ —Ä–æ–ª–µ–π"

		embed {
			title = "üö© –í—ã–¥–∞—á–∞ —Ä–æ–ª–µ–π –ø–æ –∏–≥—Ä–∞–º"
			description = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤–æ–π —Ä–æ–ª–∏"
		}

		components {
			Config.current.roles.forEach { roleInfo ->
				val role = message.getGuild().getRoleOrNull(Snowflake(roleInfo.id)) ?: return@forEach

				ephemeralButton {
					label = roleInfo.name
					style = ButtonStyle.Secondary
					roleInfo.emoji?.let { rawEmoji -> emoji(rawEmoji) }

					action {
						val member = member!!.asMember()

						if (!member.hasRole(role)) {
							member.addRole(role.id)

							respond { content = "‚û° –í–∞–º –≤—ã–¥–∞–Ω–∞ —Ä–æ–ª—å ${role.mention}" }
						}
						else {
							member.removeRole(role.id)

							respond { content = "‚Ü© –£ –í–∞—Å —É–±—Ä–∞–Ω–∞ —Ä–æ–ª—å ${role.mention}" }
						}
					}
				}
			}
		}
	}

	inner class RolesPostArguments : Arguments() {
		val channel by channel {
			name = "channel"
			description = "–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞"
			requiredChannelTypes += ChannelType.GuildText
		}
	}
}